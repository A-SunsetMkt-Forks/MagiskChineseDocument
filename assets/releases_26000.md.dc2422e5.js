import{_ as e,o,c as t,V as a}from"./chunks/framework.fc84ac3a.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"releases/26000.md","filePath":"releases/26000.md","lastUpdated":1681768747000}'),i={name:"releases/26000.md"},n=a('<h2 id="_2023-4-5-magisk-v26-0" tabindex="-1">2023.4.5 Magisk v26.0 <a class="header-anchor" href="#_2023-4-5-magisk-v26-0" aria-label="Permalink to &quot;2023.4.5 Magisk v26.0&quot;">​</a></h2><p>Hey! Long time no see!</p><h3 id="bumping-minimum-android-version-to-6-0" tabindex="-1">Bumping Minimum Android Version to 6.0 <a class="header-anchor" href="#bumping-minimum-android-version-to-6-0" aria-label="Permalink to &quot;Bumping Minimum Android Version to 6.0&quot;">​</a></h3><p>Magisk&#39;s support for Android Lollipop has been pretty broken for a while without it being noticed. Also, none of the active developers of Magisk have actual hardware to run Android Lollipop. We rely on using the official Android emulator for regression testing on older platforms, however Google never shipped a Lollipop emulator image with SELinux support, leaving us with no option but to drop Lollipop support since we don&#39;t feel comfortable supporting Android Lollipop without adequate testing.</p><h3 id="new-magic-mount-implementation" tabindex="-1">New Magic Mount Implementation <a class="header-anchor" href="#new-magic-mount-implementation" aria-label="Permalink to &quot;New Magic Mount Implementation&quot;">​</a></h3><p>Magic Mount, the feature that make modules modify partitions, has gone through a major rewrite. The existing implementation doesn&#39;t work well with OEMs injecting overlays into their system using <code>overlayfs</code>. The new implementation fundamentally changes how filesystem mirrors are created, giving us a more accurate clone of the unmodified filesystem.</p><h3 id="new-sepolicy-rule-implementation" tabindex="-1">New <code>sepolicy.rule</code> Implementation <a class="header-anchor" href="#new-sepolicy-rule-implementation" aria-label="Permalink to &quot;New `sepolicy.rule` Implementation&quot;">​</a></h3><p>Magisk allows modules to provide custom SELinux patches by including the file <code>sepolicy.rule</code>. Due to the complicated nature of SELinux patching, the compatibility of this functionality has been pretty spotty; many devices are not supported. In this release, a brand new pre-init partition detection mechanism has been designed to support even more devices. Due to complicated reasons, this detection mechanism cannot be performed in a custom recovery environment.</p><p><strong>This means that any installation of Magisk v26+ using custom recovery will be incomplete; a subsequent re-installation through the Magisk app after booting up is required.</strong></p><h3 id="zygisk-updates" tabindex="-1">Zygisk Updates <a class="header-anchor" href="#zygisk-updates" aria-label="Permalink to &quot;Zygisk Updates&quot;">​</a></h3><p><strong>The new Zygisk API v4 is now live!</strong> It comes with new features and a refined PLT function hook API. The implementaton of Zygisk has also gone through some major refactoring, including new code loading/unloading mechanisms and a new PLT function hook implementation.</p><p>Head over to the <a href="https://github.com/topjohnwu/zygisk-module-sample" target="_blank" rel="noreferrer">Zygisk Module Sample</a> repository to check out the new API and documentation!</p><h3 id="full-changelog-here" tabindex="-1">Full Changelog: <a href="https://topjohnwu.github.io/Magisk/changes.html" target="_blank" rel="noreferrer">here</a> <a class="header-anchor" href="#full-changelog-here" aria-label="Permalink to &quot;Full Changelog: [here](https://topjohnwu.github.io/Magisk/changes.html)&quot;">​</a></h3>',13),r=[n];function s(l,h,m,p,d,u){return o(),t("div",null,r)}const f=e(i,[["render",s]]);export{g as __pageData,f as default};
