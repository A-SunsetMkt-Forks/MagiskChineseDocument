import{_ as e,D as t,c as o,l as i,a,I as n,a4 as s,o as r}from"./chunks/framework.CasJ7utE.js";const v=JSON.parse('{"title":"构建和开发 Magisk","description":"","frontmatter":{},"headers":[],"relativePath":"build.md","filePath":"build.md","lastUpdated":1685389078000}'),d={name:"build.md"},h=i("h1",{id:"构建和开发-magisk",tabindex:"-1"},[a("构建和开发 Magisk "),i("a",{class:"header-anchor",href:"#构建和开发-magisk","aria-label":'Permalink to "构建和开发 Magisk"'},"​")],-1),c=i("h2",{id:"设置环境",tabindex:"-1"},[a("设置环境 "),i("a",{class:"header-anchor",href:"#设置环境","aria-label":'Permalink to "设置环境"'},"​")],-1),p=i("li",null,[a("支持的平台： "),i("ul",null,[i("li",null,"Linux x64"),i("li",null,"macOS x64 (Intel)"),i("li",null,"macOS arm64 (Apple Silicon)"),i("li",null,"Windows x64")])],-1),u=i("li",null,[a("仅 Windows： 启用"),i("a",{href:"https://learn.microsoft.com/zh-cn/windows/apps/get-started/enable-your-device-for-development",target:"_blank",rel:"noreferrer"},"开发者模式"),a("。因为需要支持符号链接。")],-1),k=i("li",null,"在 Unix 上，使用您喜欢的软件包管理器安装 python3",-1),g=i("li",null,[a("在 Windows 上，在"),i("a",{href:"https://www.python.org/downloads/windows/",target:"_blank",rel:"noreferrer"},"官方网站"),a("上下载并安装 Python 最新的版本。"),i("br"),a(" 请在安装过程中选择 "),i("strong",null,"“Add Python to PATH（将 Python 添加到 PATH）”"),a("。")],-1),_=i("code",null,"pip install colorama",-1),b=i("code",null,"colorama",-1),m=s('<li>安装 Git： <ul><li>在 Unix 上，使用您喜欢的软件包管理器安装 git</li><li>在 Windows 上，在<a href="https://git-scm.com/download/win" target="_blank" rel="noreferrer">官方网站</a>上下载并安装最新的 Git 版本。<br> 请确保在安装过程前 <strong>“启用符号链接”</strong>。</li></ul></li><li>安装 Android Studio 并按照说明进行初始设置。</li><li>将环境变量 <code>ANDROID_SDK_ROOT</code> 设置为 Android SDK 文件夹。此路径可以在 Android Studio 设置中找到。</li><li>设置 JDK： <ul><li>建议的选项是将环境变量 <code>ANDROID_STUDIO</code> 设置为 Android Studio 的安装路径。构建脚本将自动查找并使用捆绑的 JDK。</li><li>您也可以自己设置 JDK 17，但本指南不再赘述。</li></ul></li><li>克隆源代码：</li>',5),f=s(`<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recurse-submodules</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/topjohnwu/Magisk.git</span></span></code></pre></div><ul><li>运行 <code>./build.py ndk</code> 使用脚本下载并安装 NDK</li></ul><h2 id="构建" tabindex="-1">构建 <a class="header-anchor" href="#构建" aria-label="Permalink to &quot;构建&quot;">​</a></h2><ul><li>要构建所有内容并创建最终的 Magisk APK，请运行 <code>./build.py all</code> 。</li><li>您还可以构建特定的子组件。调用 <code>build.py</code> 查看您的选项<br> 对于每个操作，使用 <code>-h</code> 访问帮助（例如 <code>./build.py binary -h</code> ）</li><li>使用 <code>config.prop</code> 配置构建。提供了示例 <code>config.prop.sample</code> 。</li></ul><h2 id="ide-支持" tabindex="-1">IDE 支持 <a class="header-anchor" href="#ide-支持" aria-label="Permalink to &quot;IDE 支持&quot;">​</a></h2><ul><li><a href="https://github.com/topjohnwu/Magisk/" target="_blank" rel="noreferrer">Magisk 的存储库</a>可以作为一个项目直接使用 Android Studio 打开。</li><li>项目中的 Kotlin、Java、C++ 和 C 代码应该在 Android Studio 中得到适当的开箱即用的支持。</li><li>在处理原生（native）代码之前运行 <code>./build.py binary</code> ，因为某些生成的代码仅在构建过程中创建。</li></ul><h3 id="在-android-studio-中开发-rust" tabindex="-1">在 Android Studio 中开发 Rust <a class="header-anchor" href="#在-android-studio-中开发-rust" aria-label="Permalink to &quot;在 Android Studio 中开发 Rust&quot;">​</a></h3><p>由于 Magisk NDK 软件包 <a href="https://github.com/topjohnwu/ondk" target="_blank" rel="noreferrer">ONDK</a>（与 <code>./build.py ndk</code> 一起安装的软件包）包含一个完全独立的 Clang + Rust 工具链，因此单独构建 Magisk 项目不需要配置工具链。但是，由于 Intellij Rust 插件的工作方式，您必须进行一些额外的设置才能使 Android Studio 与 Magisk 的 Rust 代码库一起使用：</p><ul><li>安装官方 Rust 工具链管理器 <a href="https://rustup.rs/" target="_blank" rel="noreferrer">rustup</a></li><li>链接 ONDK Rust 工具链并将其设置为默认值：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将 ONDK 工具链与名称“magisk”链接起来</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rustup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> toolchain</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> magisk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ANDROID_SDK_ROOT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/ndk/magisk/toolchains/rust&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置为默认</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rustup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> magisk</span></span></code></pre></div><ul><li>在 Android Studio 中安装 <a href="https://www.jetbrains.com/rust/" target="_blank" rel="noreferrer">Intellij Rust 插件</a></li><li>在 首选项（Preferences） &gt; 语言和框架（Languages &amp; Frameworks） &gt; Rust 中，将 <code>$ANDROID_SDK_ROOT/ndk/magisk/toolchains/rust/bin</code> 设置为工具链位置</li><li>打开 <code>native/src/Cargo.toml</code> ，然后在“未找到 Cargo 项目（No Cargo projects found）”横幅中选择“附加（Attach）”</li></ul><h2 id="签名和分发" tabindex="-1">签名和分发 <a class="header-anchor" href="#签名和分发" aria-label="Permalink to &quot;签名和分发&quot;">​</a></h2><ul><li>在发布版本中，Magisk 的 root 守护程序将使用对 Magisk APK 进行密钥签名的证书作为参考，拒绝并强制卸载任何不匹配的 Magisk 应用，保护用户免受恶意和未经验证的 Magisk APK 的侵害。</li><li>要在 Magisk 本身上进行任何开发，请切换到 <strong>官方调试版本并重新安装 Magisk</strong> 以关闭签名检查。</li><li>要分发使用您自己的密钥签名的自己的 Magisk 构建，请在 <code>config.prop</code> 中设置您的签名配置。</li><li>查看 <a href="https://developer.android.google.cn/studio/publish/app-signing.html#generate-key" target="_blank" rel="noreferrer">Google 的文档</a>，了解有关生成自己的密钥的更多详细信息。</li></ul>`,13);function y(F,A,D,C,S,w){const l=t("Badge");return r(),o("div",null,[h,c,i("ul",null,[p,u,i("li",null,[a("安装 Python 3.8+： "),i("ul",null,[k,g,i("li",null,[a("在 Windows 上 "),n(l,{type:"tip",text:"可选"}),a(" ：运行 "),_,a(" 以安装 "),b,a(" python 包")])])]),m]),f])}const T=e(d,[["render",y]]);export{v as __pageData,T as default};
